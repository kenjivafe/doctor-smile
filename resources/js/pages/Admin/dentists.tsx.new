import { useState } from 'react';
import { Head, usePage, Link, router } from '@inertiajs/react';
import { PageProps } from '@inertiajs/core';
import { 
  Trash2, 
  FileText, 
  Edit, 
  Loader2, 
  UserRound, 
  ArrowUpDown, 
  Phone, 
  Mail, 
  Plus, 
  CheckCircle, 
  Clock, 
  BarChart3, 
  Search 
} from 'lucide-react';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { BarChart, ResponsiveContainer, XAxis, YAxis, Bar, Tooltip, Legend } from 'recharts';
import { DataTable } from '@/components/data-table';
import type { ColumnDef } from '@tanstack/react-table';

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Dashboard',
        href: '/admin/dashboard',
    },
    {
        title: 'Dentists',
        href: '/admin/dentists',
    },
];

// Define interfaces for the page props
interface DentistData {
    id: number;
    name: string;
    email: string;
    phone?: string; // direct from join (dentists.phone)
    dentist?: {
        phone?: string;
        specialty?: string;
        avatar?: string;
    };
    specialty?: string;
    avatar?: string;
    totalAppointments: number;
    completedAppointments: number;
    cancelledAppointments: number;
    revenue: number;
    rating: number;
    status: 'active' | 'inactive' | 'onleave';
}

interface AppointmentData {
    id: number;
    patient_name: string;
    service_name: string;
    appointment_datetime: string;
    status: string;
    duration_minutes: number;
    cost: number;
}

interface DentistStatsData {
    name: string;
    completedAppointments: number;
    cancelledAppointments: number;
    revenue: number;
}

interface DentistsPageProps extends PageProps {
    dentists?: DentistData[];
    dentistStats?: DentistStatsData[];
    recentAppointments?: AppointmentData[];
}

// Define types for table components
type SortingState = 'asc' | 'desc' | false;

interface TableColumn {
    toggleSorting: (state: boolean) => void;
    getIsSorted: () => SortingState;
}

interface TableRow<T> {
    original: T;
    getValue: (key: string) => unknown;
}

// Actions cell component for the dentists table
const ActionsCell = ({ row }: { row: TableRow<DentistData> }) => {
    const dentist = row.original;
    const [showDeleteDialog, setShowDeleteDialog] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);

    const handleDelete = () => {
        setIsDeleting(true);
        router.delete(route('admin.dentists.destroy', { id: dentist.id }), {
            onSuccess: () => {
                setShowDeleteDialog(false);
                // The page will refresh automatically due to Inertia's visit
            },
            onError: () => {
                setIsDeleting(false);
            }
        });
    };

    return (
        <>
            <div className="flex gap-2 justify-end">
                <Button variant="ghost" size="icon" asChild>
                    <Link href={route('admin.dentists.show', { id: dentist.id })}>
                        <FileText className="w-4 h-4" />
                    </Link>
                </Button>
                <Button variant="ghost" size="icon" asChild>
                    <Link href={route('admin.dentists.edit', { id: dentist.id })}>
                        <Edit className="w-4 h-4" />
                    </Link>
                </Button>
                <Button 
                    variant="ghost" 
                    size="icon" 
                    onClick={() => setShowDeleteDialog(true)}
                    className="text-destructive hover:text-destructive/80"
                >
                    <Trash2 className="w-4 h-4" />
                </Button>
            </div>

            {/* Delete Confirmation Dialog */}
            <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Delete Dentist</DialogTitle>
                        <DialogDescription>
                            Are you sure you want to delete {dentist.name}? This action cannot be undone.
                        </DialogDescription>
                    </DialogHeader>
                    <DialogFooter>
                        <div className="flex justify-end gap-2">
                            <Button 
                                variant="outline" 
                                onClick={() => setShowDeleteDialog(false)}
                                disabled={isDeleting}
                            >
                                Cancel
                            </Button>
                            <Button 
                                variant="destructive"
                                onClick={handleDelete}
                                disabled={isDeleting}
                            >
                                {isDeleting ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        Deleting...
                                    </>
                                ) : 'Delete'}
                            </Button>
                        </div>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    );
};

// Define columns for the dentists table
const columns: ColumnDef<DentistData>[] = [
    {
        accessorKey: 'name',
        header: ({ column }: { column: TableColumn }) => (
            <div className="flex items-center">
                <span>Name</span>
                <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
                >
                    <ArrowUpDown className="ml-2 w-4 h-4" />
                </Button>
            </div>
        ),
        cell: ({ row }: { row: TableRow<DentistData> }) => {
            const dentist = row.original;
            return (
                <div className="flex gap-3 items-center">
                    <Avatar>
                        <AvatarImage src={dentist.avatar} alt={dentist.name} />
                        <AvatarFallback>
                            <UserRound className="w-5 h-5" />
                        </AvatarFallback>
                    </Avatar>
                    <div>
                        <p className="font-medium">{dentist.name}</p>
                        <p className="text-sm text-muted-foreground">
                            {dentist.specialty || 'General Dentistry'}
                        </p>
                    </div>
                </div>
            );
        },
    },
    {
        accessorKey: 'email',
        header: 'Contact',
        cell: ({ row }: { row: TableRow<DentistData> }) => {
            const dentist = row.original;
            const phone = dentist.phone || dentist.dentist?.phone;
            return (
                <div className="space-y-1">
                    <div className="flex items-center text-sm">
                        <Mail className="mr-2 w-3.5 h-3.5 text-muted-foreground" />
                        <span>{dentist.email}</span>
                    </div>
                    {phone && (
                        <div className="flex items-center text-sm">
                            <Phone className="mr-2 w-3.5 h-3.5 text-muted-foreground" />
                            <span>{phone}</span>
                        </div>
                    )}
                </div>
            );
        },
    },
    {
        accessorKey: 'totalAppointments',
        header: () => <div className="text-right">Appointments</div>,
        cell: ({ row }: { row: TableRow<DentistData> }) => {
            const totalAppointments = Number(row.getValue('totalAppointments')) || 0;
            const completed = row.original.completedAppointments || 0;
            const completionRate = totalAppointments > 0
                ? Math.round((completed / totalAppointments) * 100)
                : 0;

            return (
                <div className="space-y-1 text-right">
                    <p className="font-medium">{totalAppointments}</p>
                    <p className="text-xs text-muted-foreground">{completionRate}% completion rate</p>
                </div>
            );
        },
    },
    {
        accessorKey: 'revenue',
        header: () => <div className="text-right">Revenue</div>,
        cell: ({ row }: { row: TableRow<DentistData> }) => {
            const revenue = Number(row.getValue('revenue')) || 0;
            const formatted = new Intl.NumberFormat('en-PH', {
                style: 'currency',
                currency: 'PHP',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
            }).format(revenue);

            return <div className="font-medium text-right">{formatted}</div>;
        },
    },
    {
        accessorKey: 'status',
        header: 'Status',
        cell: ({ row }: { row: TableRow<DentistData> }) => {
            const status = String(row.getValue('status')) || 'inactive';
            return (
                <div className="flex justify-center">
                    <Badge variant={getStatusVariant(status)}>
                        {status.charAt(0).toUpperCase() + status.slice(1)}
                    </Badge>
                </div>
            );
        },
    },
    {
        id: 'actions',
        cell: ActionsCell,
    },
];

// Helper function to get status badge variant
function getStatusVariant(status: string): "default" | "secondary" | "destructive" | "outline" {
    switch (status.toLowerCase()) {
        case 'active':
            return 'default';
        case 'inactive':
            return 'secondary';
        case 'onleave':
            return 'outline';
        default:
            return 'outline';
    }
}

export default function Dentists() {
    // Get data from props
    const { dentists = [], dentistStats = [] } = usePage<DentistsPageProps>().props;

    // State for search input
    const [searchQuery, setSearchQuery] = useState('');
    
    // State for active tab
    const [activeTab, setActiveTab] = useState<'list' | 'performance'>('list');

    // Calculate total metrics to ensure they're accurate
    const totalCompletedAppointments = dentists.reduce(
        (total, dentist) => total + (dentist.completedAppointments || 0), 0
    );

    const totalRevenue = dentists.reduce(
        (total, dentist) => total + (dentist.revenue || 0), 0
    );

    // Calculate average completion rate properly
    const avgCompletionRate = dentists.length > 0
        ? Math.round(dentists.reduce((total, dentist) => {
            if (dentist.totalAppointments > 0) {
                return total + ((dentist.completedAppointments / dentist.totalAppointments) * 100);
            }
            return total;
        }, 0) / dentists.filter(d => d.totalAppointments > 0).length || 0)
        : 0;

    // Filter dentists based on search query
    const filteredDentists = dentists.filter(dentist =>
        dentist.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        dentist.email?.toLowerCase().includes(searchQuery.toLowerCase())
    );

    // Sort dentist stats by revenue for the chart
    const sortedDentistStats = [...dentistStats]
        .sort((a, b) => b.revenue - a.revenue)
        .slice(0, 10); // Show top 10 dentists

    // Custom formatter for revenue in charts
    const formatRevenue = (value: number) => `₱${value.toLocaleString()}`;

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Dentist Management" />

            <div className="flex flex-col flex-1 gap-4 p-8 h-full">
                <div className="flex justify-between items-center">
                    <div>
                        <h2 className="text-2xl font-bold tracking-tight">Dentist Management</h2>
                        <p className="text-muted-foreground">
                            Manage your dental clinic professionals and track their performance.
                        </p>
                    </div>
                    <Button asChild>
                        <Link href={route('admin.dentists.create')}>
                            <Plus className="mr-2 w-4 h-4" />
                            Add Dentist
                        </Link>
                    </Button>
                </div>

                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <Card>
                        <CardHeader className="flex flex-row justify-between items-center pb-2 space-y-0">
                            <CardTitle className="text-sm font-medium">Total Dentists</CardTitle>
                            <UserRound className="w-4 h-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">{dentists.length}</div>
                            <p className="text-xs text-muted-foreground">
                                {dentists.filter(d => d.status === 'active').length} active
                            </p>
                        </CardContent>
                    </Card>

                    <Card>
                        <CardHeader className="flex flex-row justify-between items-center pb-2 space-y-0">
                            <CardTitle className="text-sm font-medium">Completed Appointments</CardTitle>
                            <CheckCircle className="w-4 h-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">
                                {totalCompletedAppointments}
                            </div>
                            <p className="text-xs text-muted-foreground">Across all dentists</p>
                        </CardContent>
                    </Card>

                    <Card>
                        <CardHeader className="flex flex-row justify-between items-center pb-2 space-y-0">
                            <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
                            <BarChart3 className="w-4 h-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">
                                ₱{totalRevenue.toLocaleString()}
                            </div>
                            <p className="text-xs text-muted-foreground">From completed treatments</p>
                        </CardContent>
                    </Card>

                    <Card>
                        <CardHeader className="flex flex-row justify-between items-center pb-2 space-y-0">
                            <CardTitle className="text-sm font-medium">Avg. Completion Rate</CardTitle>
                            <Clock className="w-4 h-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                            <div className="text-2xl font-bold">
                                {avgCompletionRate}%
                            </div>
                            <p className="text-xs text-muted-foreground">Appointment completion</p>
                        </CardContent>
                    </Card>
                </div>

                <div className="w-full">
                    <div className="border-b">
                        <div className="flex space-x-2">
                            <button
                                onClick={() => setActiveTab('list')}
                                className={`px-4 py-2 text-sm font-medium ${activeTab === 'list' ? 'border-b-2 border-primary text-primary' : 'text-muted-foreground'}`}
                            >
                                Dentist List
                            </button>
                            <button
                                onClick={() => setActiveTab('performance')}
                                className={`px-4 py-2 text-sm font-medium ${activeTab === 'performance' ? 'border-b-2 border-primary text-primary' : 'text-muted-foreground'}`}
                            >
                                Performance
                            </button>
                        </div>
                    </div>

                    {/* Dentist List Tab */}
                    {activeTab === 'list' && (
                        <div className="pt-4">
                            <Card>
                                <CardHeader>
                                    <div className="flex justify-between items-center">
                                        <div>
                                            <CardTitle>Dentists</CardTitle>
                                            <CardDescription>
                                                Manage your dentists and their details.
                                            </CardDescription>
                                        </div>
                                        <div className="flex gap-2 w-64">
                                            <div className="relative w-full">
                                                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                                                <Input
                                                    placeholder="Search dentists..."
                                                    className="pl-8"
                                                    value={searchQuery}
                                                    onChange={(e) => setSearchQuery(e.target.value)}
                                                />
                                            </div>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    <DataTable
                                        columns={columns}
                                        data={filteredDentists}
                                        emptyMessage="No dentists found."
                                    />
                                </CardContent>
                            </Card>
                        </div>
                    )}

                    {/* Performance Tab */}
                    {activeTab === 'performance' && (
                        <div className="pt-4">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Performance Overview</CardTitle>
                                    <CardDescription>
                                        Track your dentists' performance metrics and revenue.
                                    </CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="h-[400px]">
                                        <ResponsiveContainer width="100%" height="100%">
                                            <BarChart
                                                data={sortedDentistStats}
                                                margin={{
                                                    top: 20,
                                                    right: 30,
                                                    left: 20,
                                                    bottom: 5,
                                                }}
                                            >
                                                <XAxis dataKey="name" />
                                                <YAxis />
                                                <Tooltip 
                                                    formatter={(value) => 
                                                        typeof value === 'number' 
                                                            ? formatRevenue(Number(value)) 
                                                            : value
                                                    } 
                                                />
                                                <Legend />
                                                <Bar 
                                                    dataKey="revenue" 
                                                    name="Revenue (₱)" 
                                                    fill="#8884d8" 
                                                />
                                            </BarChart>
                                        </ResponsiveContainer>
                                    </div>
                                </CardContent>
                            </Card>
                        </div>
                    )}
                </div>
            </div>
        </AppLayout>
    );
}
