# Coding pattern preferences

- Don't try to npm run dev or php artisan serve since I am using laravel herd to serve my projects
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200–300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming

# Coding workflow preferences

- Focus on areas of code relevant to the task.
- Do not touch code that is unrelated to the task.
- Write thorough tests for all major functionality.
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly structed.
- Always think about what other methods and areas of code might be affected by code changes.
- Update the todo.txt file after each change. Always check it.
- When I say checkpoint, update the todo.txt, readme.md, and .windsurfrules files. Before I git commit and push.

# Backend

- Use Laravel 12 as the PHP framework with React Starter Kit.
- Database: MySQL
- Authentication: Basic Auth + Role-Based Access Control (Admin (backup account), Dentist, Patient)
- Use WebSockets for real-time updates.

# Frontend

- Use React and use kebab-case for React component file names (e.g., user-card.tsx, not UserCard.tsx).
- Prefer named exports for components.
- UI Framework: ShadCN UI + Tailwind CSS.
- Icons: Lucide React.
- Ensure a mobile-friendly & responsive design.

# Features & Integrations

- Appointment Management
- Patients select a date/time.
- Dentists approve, suggest a new time, or reject.
- Patients confirm or cancel the suggested time.
- Dentists manually set available slots.
- Time management & reallocation support.

# Specifications

Doctor Smile – Dental Clinic Appointment System

1. Overview
   Doctor Smile is a modern dental clinic appointment system designed to streamline scheduling, patient management, and decision-making for dental professionals. The system allows patients to book appointments, dentists to manage availability, and both parties to track records efficiently.

2. Tech Stack
   Backend: Laravel 12, MySQL
   Frontend: React (Vibe Coding)
   UI: ShadCN UI + Tailwind CSS
   Icons: Lucide React
   Authentication: Basic auth with role-based access control (Admin (optional), Dentist, Patient)
   Real-time updates: WebSockets for instant status updates
   Mobile-friendly & responsive: Fully optimized for mobile and desktop

3. Core Features
   A. Appointment Management
   ✅ Patients can book appointments based on available time slots
   ✅ Dentists can approve, suggest a new time, or reject appointments
   ✅ Patients must confirm or cancel the dentist's suggested time
   ✅ Appointment status updates in real time

B. Time Availability & Scheduling
✅ Dentists can manually set available working hours
✅ Supports appointment reallocation and rescheduling
✅ Integrates with Google Calendar for seamless scheduling

C. Cancellations & Reminders
✅ Patients can cancel their appointments before a set deadline
✅ Email reminders via SMTP for upcoming appointments

D. Payments & Billing
❌ Option for future expansion to include insurance payments

E. Decision Support & Analytics
✅ Admin dashboard with insights (appointment trends, peak hours, patient stats)
✅ Data-driven recommendations for better time management

F. Patient Record Management
✅ Patients can log in and view their appointment history & personal details
✅ Dentists can update patient records if needed

4. User Roles & Permissions
   Role Permissions
   Admin (Optional) Full system control, access all data, manage users, and view analytics
   Dentist Approve/reject appointments, manage availability, access patient records, view analytics
   Patient Book/cancel appointments, view appointment history, receive reminders

5. Data Models
   Patient Table
   Column Name Data Type Description
   id UUID Unique identifier
   name String Full name
   address String Residential address
   contact_number String Phone number
   gender Enum Male, Female, Other
   age Integer Patient's age
   email String Login email
   Appointment Table
   Column Name Data Type Description
   id UUID Unique identifier
   patient_id UUID References patients.id
   dentist_id UUID References users.id (dentist)
   reason Text Reason for appointment
   date Date Scheduled date
   time Time Scheduled time
   status Enum Pending, Approved, Rejected, Cancelled

6. Integrations
   ✅ Google Calendar – Sync appointments
   ✅ SMTP Email – Send reminders & notifications
   ✅ WebSockets – Real-time updates

7. Future Enhancements (Optional)
   AI-powered appointment recommendations based on past trends
   Video consultation for remote dental checkups
   Multi-clinic support
